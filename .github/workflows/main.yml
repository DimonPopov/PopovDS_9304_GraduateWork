name: Build and Deploy
on:
  push:
    branches:
      - master
      - pull_request
env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: '6.4.2'
  ARTIFACT_NAME: 'test_artifact'
  PROJECT_NAME: 'GraduateWork'
jobs:
  Ubuntu:
    runs-on: ubuntu-20.04
    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v3
      - name: (2) Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: '${{ env.SOURCE_DIR }}/qt/'
          modules: 'qtdatavis3d'
          cache: 'true'
          cache-key-prefix: 'qt-ubuntu-cache'
          setup-python: 'false'
      - name: (3) Install boost lib
        uses: MarkusJx/install-boost@v2.4.1
        id: install-boost
        with:
          boost_version: 1.81.0
          platform_version: 20.04
      - name: (4) Create build directory
        run: mkdir ${{ env.SOURCE_DIR }}/build
      - name: (5) Build
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
             qmake ../${{ env.PROJECT_NAME }}.pro
             make
      - name: (6) Download linuxdeployqt
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
             wget -O deploy.AppImage https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
             chmod +x deploy.AppImage
             export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/gcc_64/lib/
             cp ${{ env.SOURCE_DIR }}/linux/* .
      - name: (7) Create AppImage
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
             ./deploy.AppImage ${{ env.PROJECT_NAME }} -unsupported-allow-new-glibc -appimage
             mv ${{ env.PROJECT_NAME }}*.AppImage ${{ env.ARTIFACT_NAME }}
      - name: (8) Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.SOURCE_DIR }}/build/${{ env.ARTIFACT_NAME }}
          
  # Windows:
  #   runs-on: windows-2019
  #   steps:
  #     - name: (1) Checkout repo
  #       uses: actions/checkout@v3
  #     - name: (2) Install Qt
  #       uses: jurplel/install-qt-action@v3
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         host: 'windows'
  #         target: 'desktop'
  #         arch: 'win64_msvc2019_64'
  #         dir: '${{ env.SOURCE_DIR }}/qt/'
  #         modules: 'qtdatavis3d'
  #         cache: 'true'
  #         cache-key-prefix: 'qt-windows-cache'
  #         setup-python: 'false'
      
  #     - name: (3) Create build directory
  #       run: mkdir ${{ env.SOURCE_DIR }}/build
  #     - name: (4) Build
  #       working-directory: ${{ env.SOURCE_DIR }}/build
  #       run: qmake -h