name: Build and Deploy
on:
  push:
    branches:
      - I3
  
env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: '6.4.2'
  ARTIFACT_NAME: 'test_artifact'
  PROJECT_NAME: 'GraduateWork'
jobs:
  Ubuntu:
    runs-on: ubuntu-22.04
    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v3
      - name: (2) Cache deps
        uses: actions/cache@v3
        id: cache-data
        with:
          path: /usr/local
          key: boost-lib
      - name: (3) Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: '${{ env.SOURCE_DIR }}/qt/'
          modules: 'qtdatavis3d'
          cache: 'true'
          cache-key-prefix: 'qt-ubuntu-cache'
          setup-python: 'false'
      - name: (4) Install boost lib
        if: steps.cache-data.outputs.cache-hit != 'true'
        run: |
             sudo apt-get install libboost-all-dev
             wget -O boost_1_81_0.tar.gz http://sourceforge.net/projects/boost/files/boost/1.81.0/boost_1_81_0.tar.gz/download
             tar xzvf boost_1_81_0.tar.gz
             cd boost_1_81_0/
             sudo ./bootstrap.sh --prefix=/usr/local
             sudo ./b2 install
             export LD_LIBRARY_PATH=/usr/local/lib
        
      - name: (5) Create build directory
        run: mkdir ${{ env.SOURCE_DIR }}/build
      - name: (6) Build
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
             qmake ../${{ env.PROJECT_NAME }}.pro
             make
      - name: (7) Install FUSE
        run: |
             sudo add-apt-repository universe
             sudo apt install libfuse2
      - name: (8) Download linuxdeployqt
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
             wget -O deploy.AppImage https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
             chmod +x deploy.AppImage
             export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/gcc_64/lib/
             cp ${{ env.SOURCE_DIR }}/linux/* .
      - name: (9) Create AppImage
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
             ./deploy.AppImage ${{ env.PROJECT_NAME }} -unsupported-allow-new-glibc -appimage
             mv ${{ env.PROJECT_NAME }}*.AppImage ${{ env.ARTIFACT_NAME }}
      - name: (10) Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.SOURCE_DIR }}/build/${{ env.ARTIFACT_NAME }}
          
  # Windows:
  #   runs-on: windows-2019
  #   steps:
  #     - name: (1) Checkout repo
  #       uses: actions/checkout@v3
  #     - name: (2) Install Qt
  #       uses: jurplel/install-qt-action@v3
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         host: 'windows'
  #         target: 'desktop'
  #         arch: 'win64_msvc2019_64'
  #         dir: '${{ env.SOURCE_DIR }}/qt/'
  #         modules: 'qtdatavis3d'
  #         cache: 'true'
  #         cache-key-prefix: 'qt-windows-cache'
  #         setup-python: 'false'
      
  #     - name: (3) Create build directory
  #       run: mkdir ${{ env.SOURCE_DIR }}/build
  #     - name: (4) Build
  #       working-directory: ${{ env.SOURCE_DIR }}/build
  #       run: qmake -h
